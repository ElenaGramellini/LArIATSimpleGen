#include "services_lariat.fcl"
#include "textGen.fcl"
#include "largeantmodules_lariat.fcl"
#include "detsimmodules_lariat.fcl"
#include "caldata_lariat.fcl"
##include "triggeralgo_service.fcl"
#include "hitfindermodules.fcl"
#include "lariatclustermodules.fcl"
#include "trackfindermodules.fcl"
#include "calorimetry.fcl"
#include "particleid.fcl"
#include "showerreco3d.fcl"
#include "showerquality.fcl"
#include "lariat_reco_algs.fcl"
#include "lariatbeamlinereco.fcl"
#include "services_lariat.fcl"
#include "lariatcheckmodules.fcl"
#include "triggeralgo_service.fcl"
#include "lariatanamodules.fcl"
#include "pandoramodules.fcl"
process_name: TextSinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "anaTreeGenText_kaonsplus.root" }
  RandomNumberGenerator: {} #ART native random number generator
  #user:         @local::lariat_simulation_services
  
  @table::lariat_simulation_services
  LArSeedService: @local::random_seedservice

TimeTracker: { 
#      printSummary : (( true | false ))  # default is 'true'
      dbOutput     : {

         filename :  "some_filename.db"  # default is "" 
#         overwrite:  (( true | false ))  # default is 'false'

      }
   }



}

services.scheduler.SkipEvent: [ ProductNotFound ]

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   500          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_textfilegen	  
   largeant:  @local::lariat_largeant	  
   daq:       @local::lariat_simwire
   
   ### calwire producers ###
  caldata:              @local::lariat_calroi

  ### hit-finder producers ###
  gaushit:             @local::gaus_hitfinder
  cchit:               @local::standard_clustercrawlerhit

  ### cluster-finder producers
  linecluster:          @local::standard_linecluster
  trajcluster:          @local::standard_trajcluster
  blurredcluster:       @local::standard_blurredcluster

  ### track-finder producers
  costrk:               @local::standard_cosmictracker
  pmtrack:              @local::standard_pmalgtrackmaker
  pmtracktc:            @local::standard_pmalgtrackmaker
  cctrack:              @local::standard_cctrackmaker
  
  ### Shower-Finder producers
  showerreco:  	 	@local::standard_showerreco3d

  ### pandora
  pandora:            @local::standard_pandoraneutrino

  ### calorimetry and pid
  calo:                 @local::standard_calodata
  pid:                  @local::standard_chi2pid
  pandoracalo:          @local::standard_calodata
  pandorapid:           @local::standard_chi2pid
   rns:       { module_type: "RandomNumberSaver" }
 }


 analyzers:
{
  anatree: @local::lariat_anatree
}

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [
             generator, 
	     largeant, 
	     daq, 
	     caldata,
             gaushit,
             linecluster,
             trajcluster,
             pandora,
             showerreco,
             pmtrack,
             pmtracktc,
             calo,
             pid,
             pandoracalo,
             pandorapid,
             blurredcluster,
	     rns ] 
 
 ana: [ anatree ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana, stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "singleTextGen_kaonplus.root" #default file name, can override from command line with -o or --output
 }
}



physics.producers.caldata.DigitModuleLabel:                     "daq"

physics.producers.gaushit.CalDataModuleLabel:                   "caldata"
physics.producers.gaushit.Chi2NDFRetry:                          1000.


physics.producers.linecluster.HitFinderModuleLabel: "gaushit"
physics.producers.linecluster.ClusterCrawlerAlg.NumPass: 3      # Number of passes through the hit collection
physics.producers.linecluster.ClusterCrawlerAlg.MaxHitsFit: [100, 10, 3] # Max number of hits fit in each pass
physics.producers.linecluster.ClusterCrawlerAlg.MinHits:    [ 80,  8, 3] # Minimum number of hits required
physics.producers.linecluster.ClusterCrawlerAlg.MinWirAfterSkip: [ 10,  3, 2] # Min number of hits after skipping a gap
physics.producers.linecluster.ClusterCrawlerAlg.NHitsAve:    [ 10,  6, 2] # Number of hits for finding average hit charge
physics.producers.linecluster.ClusterCrawlerAlg.ChgCut:     [2, 4, 8] # Max fractional charge allowed for adding hits
physics.producers.linecluster.ClusterCrawlerAlg.ChiCut:   [4, 8, 10]  # Max fit chisq for clusters
physics.producers.linecluster.ClusterCrawlerAlg.MaxWirSkip:   [20, 4, 0] # Max number of wires to skip while crawling
physics.producers.linecluster.ClusterCrawlerAlg.KinkChiRat: [1.2, 1.2, 2] # (1st cut) Max fit chisq ratio for identifying a kink
#physics.producers.linecluster.ClusterCrawlerAlg.KinkAngCut: [0.2, 0.4, 1.5] # (2nd cut) Max kink angle
physics.producers.linecluster.ClusterCrawlerAlg.KinkAngCut: [0.2, 0.2, 0.3] # (2nd cut) Max kink angle
physics.producers.linecluster.ClusterCrawlerAlg.DoMerge: [false, true, true] # Merge clusters on pass?
physics.producers.linecluster.ClusterCrawlerAlg.TimeDelta: [8, 8, 20] # mMx tick difference at intersection for merging clusters
physics.producers.linecluster.ClusterCrawlerAlg.MergeChgCut: [0.8, 0.8, 0.8] # Max charge ratio difference for merging clusters
physics.producers.linecluster.ClusterCrawlerAlg.FindVertices: [true, true, true] # Find vertices on each pass?
physics.producers.linecluster.ClusterCrawlerAlg.LACrawl: [true, true, true] # Crawl Large Angle clusters on each pass?
physics.producers.linecluster.ClusterCrawlerAlg.LAClusAngleCut: 45  # Angle (degrees) for using Large Angle crawling code
physics.producers.linecluster.ClusterCrawlerAlg.LAClusMaxHitsFit: 4 # Max number of hits
physics.producers.linecluster.ClusterCrawlerAlg.MinHitFrac: 0.6 # Discard clusters with fraction of (numHits/numWires) < value
physics.producers.linecluster.ClusterCrawlerAlg.MinAmp: [5,5] # Min signal amplitude for merging clusters and cluster-vtx associations
physics.producers.linecluster.ClusterCrawlerAlg.HitMergeChiCut: 2.5 # Max hit separation chisq to make hits available for merging
physics.producers.linecluster.ClusterCrawlerAlg.MergeOverlapAngCut: 0.1 # max angle difference (radians) for merging overlap clusters
physics.producers.linecluster.ClusterCrawlerAlg.ChkClusterDS: true # Extend clusters DownStream after creating them?
physics.producers.linecluster.ClusterCrawlerAlg.VtxClusterSplit: true # Split clusters that cross a 2D vertex?
physics.producers.linecluster.ClusterCrawlerAlg.FindStarVertices: true # Find 2D vertices with a star topology
physics.producers.linecluster.ClusterCrawlerAlg.FindHammerClusters: true # Find 2D vertices with a hammer topology
physics.producers.linecluster.ClusterCrawlerAlg.FindVLAClusters: false # Find Very Large Angle clusters
physics.producers.linecluster.ClusterCrawlerAlg.RefineVertexClusters: false # Refine vertices and clusters after creating them
physics.producers.linecluster.ClusterCrawlerAlg.HitErrFac: 0.2  # Fraction of hit RMS to calculate cluster fit chisq
physics.producers.linecluster.ClusterCrawlerAlg.AllowNoHitWire: 3 # Allow skipping wires that have no signal
physics.producers.linecluster.ClusterCrawlerAlg.Vertex2DCut: 10 # Chisq cut for making 2D vertices
physics.producers.linecluster.ClusterCrawlerAlg.Vertex2DWireErrCut: 5 # Reject 3D vertices if wire error too large (wires)
physics.producers.linecluster.ClusterCrawlerAlg.Vertex3DCut: 3 # Chisq cut for making 3D vertices

physics.producers.linecluster.ClusterCrawlerAlg.DebugPlane: -1
physics.producers.linecluster.ClusterCrawlerAlg.DebugWire:  0
physics.producers.linecluster.ClusterCrawlerAlg.DebugHit: 0


physics.producers.costrk.ClusterModuleLabel:  "linecluster"
physics.producers.costrk.VertexModuleLabel:   "linecluster"
physics.producers.costrk.ClusterMatch.KSCut:  0.5
physics.producers.pmtrack.ClusterModuleLabel: "linecluster"
physics.producers.pmtrack.HitModuleLabel:     "linecluster"
physics.producers.pmtrack.PMAlgTracking.MinSeedSize2ndPass: 3
physics.producers.pmtrack.PMAlgTracking.FlipToBeam: true
physics.producers.pmtrack.PMAlgTracking.RunVertexing: true

physics.producers.pmtracktc.ClusterModuleLabel: "trajcluster"
physics.producers.pmtracktc.HitModuleLabel:     "gaushit"
physics.producers.pmtracktc.PMAlgTracking.MinSeedSize2ndPass: 3
physics.producers.pmtracktc.PMAlgTracking.FlipToBeam: true
physics.producers.pmtracktc.PMAlgTracking.RunVertexing: true

physics.producers.cctrack.HitModuleLabel:     "linecluster"
physics.producers.cctrack.ClusterModuleLabel: "linecluster"
physics.producers.cctrack.VertexModuleLabel:  "linecluster"
physics.producers.cctrack.MatchAlgs: 1
physics.producers.pandora.HitFinderModuleLabel:         "linecluster"

services.DetectorPropertiesService.TimeOffsetV: 0.0
services.DetectorPropertiesService.Electronlifetime: 1600
################################################################
#physics.producers.calo.CaloAlg.CalAreaConstants: [0.031,0.076]
physics.producers.calo.CaloAlg.CalAreaConstants: [0.037,0.091]
################################################################
physics.producers.calo.TrackModuleLabel:      "pmtrack"
physics.producers.calo.SpacePointModuleLabel: "pmtrack"
physics.producers.calo.UseArea:               "true"
physics.producers.pid.TrackModuleLabel:       "pmtrack"

physics.producers.pandoracalo.TrackModuleLabel:                   "pandora"
physics.producers.pandoracalo.SpacePointModuleLabel:              "pandora"
physics.producers.pandoracalo.CaloAlg.CalAreaConstants: [0.0247,0.048]
physics.producers.pandorapid.CalorimetryModuleLabel:              "pandoracalo"
physics.producers.pandorapid.TrackModuleLabel:                    "pandora"

physics.producers.showerreco.InputProducer:        "linecluster"
physics.producers.blurredcluster.HitsModuleLabel:           "linecluster"
physics.producers.blurredcluster.GlobalTPCRecon:           "false"
#physics.producers.blurredcluster.CreateDebugPDF:           "true"
physics.producers.blurredcluster.BlurredClusterAlg.BlurTick:            15
physics.producers.blurredcluster.BlurredClusterAlg.BlurTick:            15
physics.producers.blurredcluster.BlurredClusterAlg.ClusterTickDistance: 50
#### Here we try to suppress known and pointless messages


services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     append:     true       #says to append all messages to the output
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       TrackStitcher:
       {
         limit: 0
         reportEvery: 0
       }
       CRHitRemoval:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}
